apply plugin: 'com.android.application'

allprojects {
    repositories {
        jcenter()
        flatDir {
            dirs '../../../sxrsdk/SXR/sxr-libs'
        }
    }
}


android {
    compileSdkVersion 26

    defaultConfig {
        applicationId "com.samsungxr.assettests"
        minSdkVersion 23
        targetSdkVersion 26
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            moduleName = "asset-tests"
            abiFilter "armeabi-v7a"
        }

        externalNativeBuild {
            cmake {
                arguments.add('-DINCLUDE_DIR='+rootProject.projectDir.absolutePath)
                arguments.add('-DPATH_TO_LIBGVRF='+projectDir.absolutePath+'/build/intermediates/exploded-aar/framework-debug/jni/')
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    sourceSets.main {
        jni.srcDirs = [] // no auto generation of Android.mk
        jniLibs.srcDir 'libs' // pre-compiled libraries
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            output.outputFileName = rootProject.name + ".apk"
        }
    }

    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    packagingOptions {
        pickFirst 'lib/*/libc++_shared.so'
        pickFirst 'lib/*/libgnustl_shared.so'
        exclude 'lib/arm64-v8a/*'
        exclude 'lib/x86_64/*'
        exclude 'lib/x86/*'
    }
}

task copyOculusSignature(type: Copy) {
    if (rootProject.hasProperty("OCULUS_SIGS_DIRECTORY")) {
        copy {
            from rootProject.property("OCULUS_SIGS_DIRECTORY")
            into 'src/main/assets'
            include 'oculussig_*'
        }
    }
}
preBuild {}.dependsOn copyOculusSignature

project.ext.jomlVersion = "1.9.1-SNAPSHOT"

dependencies {
    implementation "org.joml:joml-android:${jomlVersion}"

    if (findProject(':sxrsdk')) {
        implementation project (':sxrsdk')
    } else {
        implementation(name:'sxrsdk-debug', ext:'aar')
    }
    if (findProject(':backend_daydream')) {
        compile project (':backend_daydream')
    } else {
        implementation(name:'backend_daydream-debug', ext:'aar')
    }
    if (findProject(':backend_oculus')) {
        implementation project (':backend_oculus')
    } else {
        implementation(name:'backend_oculus-debug', ext:'aar')
    }

    if (findProject(':backend_monoscopic')) {
        implementation project (':backend_monoscopic')
    } else {
        implementation(name:'backend_monoscopic-debug', ext:'aar')
    }
    if (findProject(':x3d')) {
        implementation project(':x3d')
    } else {
        debugCompile(name: 'x3d-debug', ext: 'aar')
        releaseCompile(name: 'x3d-release', ext: 'aar')
    }

    androidTestImplementation 'com.android.support:support-annotations:23.+'
    androidTestImplementation 'com.android.support.test:runner:0.4.1'
    androidTestImplementation 'com.android.support.test:rules:0.4.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.1'
    implementation 'net.jodah:concurrentunit:0.4.2'
    implementation project(path: ':sxr-unittestutils')
}

android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice${variant.name.capitalize()}" (type: Exec){
            dependsOn variant.install

            group = 'Device Configuration'
            description = 'Grants android permissions before running the application.'

            def adb = android.getAdbExe().toString()
            def permissions = [ 'android.permission.READ_EXTERNAL_STORAGE','android.permission.WRITE_EXTERNAL_STORAGE']
            for ( permission in permissions ) {
                commandLine "$adb shell pm grant ${variant.applicationId} $permission".split(' ')
            }
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice${variant.name.capitalize()}"
    }
}
